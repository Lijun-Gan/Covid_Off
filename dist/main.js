/******/ (function() { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
// import {country_list, int} from  './scripts/countries';
// import cases from './scripts/cases';
vaccinations_value = []; // initial setup

var svg = d3.select("svg"),
    width = svg.attr("width"),
    height = svg.attr("height"),
    path = d3.geoPath(),
    data = d3.map(),
    // vacData = d3.map(),
worldmap = "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson",
    // worldpopulation = "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world_population.csv";
// worldpopulation = "https://corona-api.com/countries";
vaccinations = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json";
var centered, world; // style of geographic projection and scaling

var projection = d3.geoRobinson().scale(130).translate([width / 2, height / 2]); // Define color scale

var colorScale = d3.scaleThreshold() // .domain([100000, 1000000, 10000000, 30000000, 100000000, 500000000])
.domain([0.1, 0.3, 5, 10, 40, 80]).range(d3.schemeGreens[7]); // add tooltip
// const tooltip = d3.select("body").append("div")
// .attr("class", "tooltip")
// .style("opacity", 0);

var tooltip = d3.select("#tooltip").style("opacity", 0); // Load external data and boot

d3.queue().defer(d3.json, worldmap) // .defer(d3.json, worldpopulation)
.defer(d3.json, vaccinations).await(ready); // Add clickable background

svg.append("rect").attr("class", "background").attr("width", width).attr("height", height).on("click", click); // ----------------------------
//Start of Choropleth drawing
// ----------------------------

function ready(error, topo, result) {
  // topo is the data received from the d3.queue function (the world.geojson)
  // the data from world_population.csv (country code and country population) is saved in data variable
  result.forEach(function (ele) {
    data.set(ele.iso_code, ele.data.slice(-1)[0]); // data.set(ele.name , ele.latest_data.confirmed)
    // if(ele.name === "S. Korea"){
    //   data.set("South Korea", ele.latest_data.confirmed)
    // }else{
    //   data.set(ele.name , ele.latest_data.confirmed)
    // }
  });

  var mouseOver = function mouseOver(d) {
    d3.selectAll(".Country").transition().duration(200).style("opacity", .5).style("stroke", "transparent");
    d3.select(this).transition().duration(200).style("opacity", 1).style("stroke", "black"); // 	.text(d.properties.name + ': ' + d.total);

    tooltip.style("left", d3.event.pageX + 15 + "px").style("top", d3.event.pageY - 28 + "px").transition().duration(400).style("opacity", 1); // d3.select('#name').text(d.properties.name + ': ' + d.total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));

    d3.select('#name').text(d.properties.name);
    d3.select('#total_vaccinations').text(d.total_vaccinations_per_hundred + "%" + " (" + d.total_vaccinations.toLocaleString() + ")");
    d3.select('#people_vaccinated').text(d.people_vaccinated_per_hundred + "%" + " (" + d.people_vaccinated.toLocaleString() + ")");
    d3.select('#people_fully_vaccinated').text(d.people_fully_vaccinated_per_hundred + "%" + " (" + d.people_fully_vaccinated.toLocaleString() + ")");
    d3.select('#daily_vaccinations').text(d.daily_vaccinations.toLocaleString());
    d3.select('#update').text(d.update);
    d3.select('#tooltip').style('left', d3.event.pageX + 20 + 'px').style('top', d3.event.pageY - 80 + 'px').style('display', 'block').style('opacity', 0.8); // .text(d.properties.name + ': ' + Math.round((d.total / 10000) * 10) / 10 + ' 10K.');
  };

  var mouseLeave = function mouseLeave() {
    d3.selectAll(".Country").transition().duration(200).style("opacity", 1).style("stroke", "transparent");
    tooltip.transition().duration(300).style("opacity", 0); // d3.select('#tooltip').transition().duration(300)
    // .style("opacity", 0);
  }; // Draw the map


  world = svg.append("g").attr("class", "world");
  world.selectAll("path").data(topo.features).enter().append("path") // draw each country
  // d3.geoPath() is a built-in function of d3 v4 and takes care of showing the map from a properly formatted geojson file, if necessary filtering it through a predefined geographic projection
  .attr("d", d3.geoPath().projection(projection)) //retrieve the name of the country from data
  .attr("data-name", function (d) {
    return d.properties.name;
  }) // set the color of each country
  .attr("fill", function (d) {
    if (data.get(d.id) === undefined) {
      d.total_vaccinations = 0;
      d.people_vaccinated = 0;
      d.people_fully_vaccinated = 0;
      d.total_vaccinations_per_hundred = 0;
      d.people_vaccinated_per_hundred = 0;
      d.people_fully_vaccinated_per_hundred = 0;
      d.daily_vaccinations = 0;
      d.update = "No data";
    } else {
      d.total_vaccinations = data.get(d.id).total_vaccinations || 0;
      d.people_vaccinated = data.get(d.id).people_vaccinated || 0;
      d.people_fully_vaccinated = data.get(d.id).people_fully_vaccinated || 0;
      d.total_vaccinations_per_hundred = data.get(d.id).total_vaccinations_per_hundred || 0;
      d.people_vaccinated_per_hundred = data.get(d.id).people_vaccinated_per_hundred || 0;
      d.people_fully_vaccinated_per_hundred = data.get(d.id).people_fully_vaccinated_per_hundred || 0;
      d.daily_vaccinations = data.get(d.id).daily_vaccinations || 0;
      d.update = data.get(d.id).date || "No data";
    }

    return colorScale(d.total_vaccinations_per_hundred);
  }) // add a class, styling and mouseover/mouseleave and click functions
  .style("stroke", "transparent").attr("class", function (d) {
    return "Country";
  }).attr("id", function (d) {
    return d.id;
  }).style("opacity", 1).on("mouseover", mouseOver).on("mouseleave", mouseLeave).on("click", click); // Legend

  var x = d3.scaleLinear().domain([0, 75]).rangeRound([600, 860]);
  var legend = svg.append("g").attr("id", "legend");
  var legend_entry = legend.selectAll("g.legend").data(colorScale.range().map(function (d) {
    d = colorScale.invertExtent(d);
    if (d[0] == null) d[0] = x.domain()[0];
    if (d[1] == null) d[1] = x.domain()[1];
    return d;
  })).enter().append("g").attr("class", "legend_entry");
  var ls_w = 20,
      ls_h = 20;
  legend_entry.append("rect").attr("x", 20).attr("y", function (d, i) {
    return height - i * ls_h - 2 * ls_h;
  }).attr("width", ls_w).attr("height", ls_h).style("fill", function (d) {
    return colorScale(d[0]);
  }).style("opacity", 0.8);
  legend_entry.append("text").attr("x", 50).attr("y", function (d, i) {
    return height - i * ls_h - ls_h - 6;
  }).text(function (d, i) {
    if (i === 0) return "< " + d[1] + "%";
    if (d[1] < d[0]) return d[0] + "% +";
    return d[0] + "% - " + d[1] + "%";
  }); // .text(function(d, i) {
  // 	if (i === 0) return "< " + d[1] / 1000000 + " m";
  // 	if (d[1] < d[0]) return d[0] / 1000000 + " m +";
  // 	return d[0] / 1000000 + " m - " + d[1] / 1000000 + " m";
  // });

  legend.append("text").attr("x", 15).attr("y", 205).text("Total vaccinations per hundred");
} // Zoom functionality


function click(d) {
  var x, y, k;

  if (d && centered !== d) {
    var centroid = path.centroid(d);
    x = -(centroid[0] * 6);
    y = centroid[1] * 6;
    k = 3;
    centered = d;
  } else {
    x = 0;
    y = 0;
    k = 1;
    centered = null;
  }

  world.selectAll("path").classed("active", centered && function (d) {
    return d === centered;
  });
  world.transition().duration(750).attr("transform", "translate(" + x + "," + y + ") scale(" + k + ")");
} /// starting covid case 
// int();
// cases();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0X3NrZWxldG9uLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInZhY2NpbmF0aW9uc192YWx1ZSIsInN2ZyIsImQzIiwic2VsZWN0Iiwid2lkdGgiLCJhdHRyIiwiaGVpZ2h0IiwicGF0aCIsImdlb1BhdGgiLCJkYXRhIiwibWFwIiwid29ybGRtYXAiLCJ2YWNjaW5hdGlvbnMiLCJjZW50ZXJlZCIsIndvcmxkIiwicHJvamVjdGlvbiIsImdlb1JvYmluc29uIiwic2NhbGUiLCJ0cmFuc2xhdGUiLCJjb2xvclNjYWxlIiwic2NhbGVUaHJlc2hvbGQiLCJkb21haW4iLCJyYW5nZSIsInNjaGVtZUdyZWVucyIsInRvb2x0aXAiLCJzdHlsZSIsInF1ZXVlIiwiZGVmZXIiLCJqc29uIiwiYXdhaXQiLCJyZWFkeSIsImFwcGVuZCIsIm9uIiwiY2xpY2siLCJlcnJvciIsInRvcG8iLCJyZXN1bHQiLCJmb3JFYWNoIiwiZWxlIiwic2V0IiwiaXNvX2NvZGUiLCJzbGljZSIsIm1vdXNlT3ZlciIsImQiLCJzZWxlY3RBbGwiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJldmVudCIsInBhZ2VYIiwicGFnZVkiLCJ0ZXh0IiwicHJvcGVydGllcyIsIm5hbWUiLCJ0b3RhbF92YWNjaW5hdGlvbnNfcGVyX2h1bmRyZWQiLCJ0b3RhbF92YWNjaW5hdGlvbnMiLCJ0b0xvY2FsZVN0cmluZyIsInBlb3BsZV92YWNjaW5hdGVkX3Blcl9odW5kcmVkIiwicGVvcGxlX3ZhY2NpbmF0ZWQiLCJwZW9wbGVfZnVsbHlfdmFjY2luYXRlZF9wZXJfaHVuZHJlZCIsInBlb3BsZV9mdWxseV92YWNjaW5hdGVkIiwiZGFpbHlfdmFjY2luYXRpb25zIiwidXBkYXRlIiwibW91c2VMZWF2ZSIsImZlYXR1cmVzIiwiZW50ZXIiLCJnZXQiLCJpZCIsInVuZGVmaW5lZCIsImRhdGUiLCJ4Iiwic2NhbGVMaW5lYXIiLCJyYW5nZVJvdW5kIiwibGVnZW5kIiwibGVnZW5kX2VudHJ5IiwiaW52ZXJ0RXh0ZW50IiwibHNfdyIsImxzX2giLCJpIiwieSIsImsiLCJjZW50cm9pZCIsImNsYXNzZWQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUVBQSxrQkFBa0IsR0FBRyxFQUFyQixDLENBQ0E7O0FBRUEsSUFBTUMsR0FBRyxHQUFHQyxFQUFFLENBQUNDLE1BQUgsQ0FBVSxLQUFWLENBQVo7QUFBQSxJQUNDQyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksSUFBSixDQUFTLE9BQVQsQ0FEVDtBQUFBLElBRUNDLE1BQU0sR0FBR0wsR0FBRyxDQUFDSSxJQUFKLENBQVMsUUFBVCxDQUZWO0FBQUEsSUFHQ0UsSUFBSSxHQUFHTCxFQUFFLENBQUNNLE9BQUgsRUFIUjtBQUFBLElBSUNDLElBQUksR0FBR1AsRUFBRSxDQUFDUSxHQUFILEVBSlI7QUFBQSxJQUtFO0FBQ0RDLFFBQVEsR0FBRyxxRkFOWjtBQUFBLElBT0M7QUFDQztBQUNBQyxZQUFZLEdBQUcsd0dBVGpCO0FBV0EsSUFBSUMsUUFBSixFQUFjQyxLQUFkLEMsQ0FFQTs7QUFDQSxJQUFNQyxVQUFVLEdBQUdiLEVBQUUsQ0FBQ2MsV0FBSCxHQUNqQkMsS0FEaUIsQ0FDWCxHQURXLEVBRWpCQyxTQUZpQixDQUVQLENBQUNkLEtBQUssR0FBRyxDQUFULEVBQVlFLE1BQU0sR0FBRyxDQUFyQixDQUZPLENBQW5CLEMsQ0FJQTs7QUFDQSxJQUFNYSxVQUFVLEdBQUdqQixFQUFFLENBQUNrQixjQUFILEdBQ2xCO0FBRGtCLENBRWpCQyxNQUZpQixDQUVWLENBQUUsR0FBRixFQUFPLEdBQVAsRUFBWSxDQUFaLEVBQWUsRUFBZixFQUFtQixFQUFuQixFQUF1QixFQUF2QixDQUZVLEVBR2pCQyxLQUhpQixDQUdYcEIsRUFBRSxDQUFDcUIsWUFBSCxDQUFnQixDQUFoQixDQUhXLENBQW5CLEMsQ0FLQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNQyxPQUFPLEdBQUd0QixFQUFFLENBQUNDLE1BQUgsQ0FBVSxVQUFWLEVBQ2Zz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aW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQge2NvdW50cnlfbGlzdCwgaW50fSBmcm9tICAnLi9zY3JpcHRzL2NvdW50cmllcyc7XG4vLyBpbXBvcnQgY2FzZXMgZnJvbSAnLi9zY3JpcHRzL2Nhc2VzJztcblxudmFjY2luYXRpb25zX3ZhbHVlID0gW11cbi8vIGluaXRpYWwgc2V0dXBcblxuY29uc3Qgc3ZnID0gZDMuc2VsZWN0KFwic3ZnXCIpLFxuXHR3aWR0aCA9IHN2Zy5hdHRyKFwid2lkdGhcIiksXG5cdGhlaWdodCA9IHN2Zy5hdHRyKFwiaGVpZ2h0XCIpLFxuXHRwYXRoID0gZDMuZ2VvUGF0aCgpLFxuXHRkYXRhID0gZDMubWFwKCksXG4gIC8vIHZhY0RhdGEgPSBkMy5tYXAoKSxcblx0d29ybGRtYXAgPSBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ob2x0enkvRDMtZ3JhcGgtZ2FsbGVyeS9tYXN0ZXIvREFUQS93b3JsZC5nZW9qc29uXCIsXG5cdC8vIHdvcmxkcG9wdWxhdGlvbiA9IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hvbHR6eS9EMy1ncmFwaC1nYWxsZXJ5L21hc3Rlci9EQVRBL3dvcmxkX3BvcHVsYXRpb24uY3N2XCI7XG4gIC8vIHdvcmxkcG9wdWxhdGlvbiA9IFwiaHR0cHM6Ly9jb3JvbmEtYXBpLmNvbS9jb3VudHJpZXNcIjtcbiAgdmFjY2luYXRpb25zID0gXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb3dpZC9jb3ZpZC0xOS1kYXRhL21hc3Rlci9wdWJsaWMvZGF0YS92YWNjaW5hdGlvbnMvdmFjY2luYXRpb25zLmpzb25cIjtcblxubGV0IGNlbnRlcmVkLCB3b3JsZDtcblxuLy8gc3R5bGUgb2YgZ2VvZ3JhcGhpYyBwcm9qZWN0aW9uIGFuZCBzY2FsaW5nXG5jb25zdCBwcm9qZWN0aW9uID0gZDMuZ2VvUm9iaW5zb24oKVxuXHQuc2NhbGUoMTMwKVxuXHQudHJhbnNsYXRlKFt3aWR0aCAvIDIsIGhlaWdodCAvIDJdKTtcblxuLy8gRGVmaW5lIGNvbG9yIHNjYWxlXG5jb25zdCBjb2xvclNjYWxlID0gZDMuc2NhbGVUaHJlc2hvbGQoKVxuXHQvLyAuZG9tYWluKFsxMDAwMDAsIDEwMDAwMDAsIDEwMDAwMDAwLCAzMDAwMDAwMCwgMTAwMDAwMDAwLCA1MDAwMDAwMDBdKVxuXHQuZG9tYWluKFsgMC4xLCAwLjMsIDUsIDEwLCA0MCwgODBdKVxuXHQucmFuZ2UoZDMuc2NoZW1lR3JlZW5zWzddKTtcblxuLy8gYWRkIHRvb2x0aXBcbi8vIGNvbnN0IHRvb2x0aXAgPSBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcImRpdlwiKVxuLy8gLmF0dHIoXCJjbGFzc1wiLCBcInRvb2x0aXBcIilcbi8vIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XG5jb25zdCB0b29sdGlwID0gZDMuc2VsZWN0KFwiI3Rvb2x0aXBcIilcbi5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XG5cbi8vIExvYWQgZXh0ZXJuYWwgZGF0YSBhbmQgYm9vdFxuXG5kMy5xdWV1ZSgpXG5cdC5kZWZlcihkMy5qc29uLCB3b3JsZG1hcClcblx0Ly8gLmRlZmVyKGQzLmpzb24sIHdvcmxkcG9wdWxhdGlvbilcblx0LmRlZmVyKGQzLmpzb24sIHZhY2NpbmF0aW9ucylcblx0LmF3YWl0KHJlYWR5KTtcblxuLy8gQWRkIGNsaWNrYWJsZSBiYWNrZ3JvdW5kXG5zdmcuYXBwZW5kKFwicmVjdFwiKVxuICAuYXR0cihcImNsYXNzXCIsIFwiYmFja2dyb3VuZFwiKVxuXHQuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHQuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG5cdC5vbihcImNsaWNrXCIsIGNsaWNrKTtcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1N0YXJ0IG9mIENob3JvcGxldGggZHJhd2luZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbmZ1bmN0aW9uIHJlYWR5KGVycm9yLCB0b3BvLCByZXN1bHQpIHtcblx0Ly8gdG9wbyBpcyB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSBkMy5xdWV1ZSBmdW5jdGlvbiAodGhlIHdvcmxkLmdlb2pzb24pXG5cdC8vIHRoZSBkYXRhIGZyb20gd29ybGRfcG9wdWxhdGlvbi5jc3YgKGNvdW50cnkgY29kZSBhbmQgY291bnRyeSBwb3B1bGF0aW9uKSBpcyBzYXZlZCBpbiBkYXRhIHZhcmlhYmxlXG4gICAgXG4gIFxuXG4gIHJlc3VsdC5mb3JFYWNoKChlbGUpPT57IFxuXG5cbiAgICBkYXRhLnNldChlbGUuaXNvX2NvZGUsZWxlLmRhdGEuc2xpY2UoLTEpWzBdIClcbiAgICAvLyBkYXRhLnNldChlbGUubmFtZSAsIGVsZS5sYXRlc3RfZGF0YS5jb25maXJtZWQpXG4gICAgLy8gaWYoZWxlLm5hbWUgPT09IFwiUy4gS29yZWFcIil7XG4gICAgLy8gICBkYXRhLnNldChcIlNvdXRoIEtvcmVhXCIsIGVsZS5sYXRlc3RfZGF0YS5jb25maXJtZWQpXG4gICAgLy8gfWVsc2V7XG4gICAgLy8gICBkYXRhLnNldChlbGUubmFtZSAsIGVsZS5sYXRlc3RfZGF0YS5jb25maXJtZWQpXG4gICAgLy8gfVxuICB9KTtcblxuXG5cblx0bGV0IG1vdXNlT3ZlciA9IGZ1bmN0aW9uKGQpIHtcblx0XHRkMy5zZWxlY3RBbGwoXCIuQ291bnRyeVwiKVxuXHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0LmR1cmF0aW9uKDIwMClcblx0XHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgLjUpXG5cdFx0XHQuc3R5bGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKTtcblx0XHRkMy5zZWxlY3QodGhpcylcblx0XHRcdC50cmFuc2l0aW9uKClcblx0XHRcdC5kdXJhdGlvbigyMDApXG5cdFx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG5cdFx0XHQuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcbiAgICAgIC8vIFx0LnRleHQoZC5wcm9wZXJ0aWVzLm5hbWUgKyAnOiAnICsgZC50b3RhbCk7XG4gICAgICB0b29sdGlwLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxNSkgKyBcInB4XCIpXG4gICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNDAwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC8vIGQzLnNlbGVjdCgnI25hbWUnKS50ZXh0KGQucHJvcGVydGllcy5uYW1lICsgJzogJyArIGQudG90YWwudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIikpO1xuICAgICAgICBkMy5zZWxlY3QoJyNuYW1lJykudGV4dChkLnByb3BlcnRpZXMubmFtZSk7XG4gICAgICAgIGQzLnNlbGVjdCgnI3RvdGFsX3ZhY2NpbmF0aW9ucycpLnRleHQoIGQudG90YWxfdmFjY2luYXRpb25zX3Blcl9odW5kcmVkICsgXCIlXCIrIFwiIChcIiArIGQudG90YWxfdmFjY2luYXRpb25zLnRvTG9jYWxlU3RyaW5nKCkgKyBcIilcIik7XG4gICAgICAgIGQzLnNlbGVjdCgnI3Blb3BsZV92YWNjaW5hdGVkJykudGV4dCggZC5wZW9wbGVfdmFjY2luYXRlZF9wZXJfaHVuZHJlZCArIFwiJVwiKyBcIiAoXCIgKyBkLnBlb3BsZV92YWNjaW5hdGVkLnRvTG9jYWxlU3RyaW5nKCkgKyBcIilcIik7XG4gICAgICAgIGQzLnNlbGVjdCgnI3Blb3BsZV9mdWxseV92YWNjaW5hdGVkJykudGV4dCggZC5wZW9wbGVfZnVsbHlfdmFjY2luYXRlZF9wZXJfaHVuZHJlZCAgKyBcIiVcIisgXCIgKFwiICsgIGQucGVvcGxlX2Z1bGx5X3ZhY2NpbmF0ZWQudG9Mb2NhbGVTdHJpbmcoKSArIFwiKVwiKTtcbiAgICAgICAgZDMuc2VsZWN0KCcjZGFpbHlfdmFjY2luYXRpb25zJykudGV4dCggIGQuZGFpbHlfdmFjY2luYXRpb25zLnRvTG9jYWxlU3RyaW5nKCkgKTtcbiAgICAgICAgZDMuc2VsZWN0KCcjdXBkYXRlJykudGV4dCggZC51cGRhdGUpO1xuXG4gICAgICAgIFxuXG4gICAgZDMuc2VsZWN0KCcjdG9vbHRpcCcpXG4gICAgLnN0eWxlKCdsZWZ0JywgKGQzLmV2ZW50LnBhZ2VYICsgMjApICsgJ3B4JylcbiAgICAuc3R5bGUoJ3RvcCcsIChkMy5ldmVudC5wYWdlWSAtIDgwKSArICdweCcpXG4gICAgLnN0eWxlKCdkaXNwbGF5JywgJ2Jsb2NrJylcbiAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjgpXG5cblx0XHRcdC8vIC50ZXh0KGQucHJvcGVydGllcy5uYW1lICsgJzogJyArIE1hdGgucm91bmQoKGQudG90YWwgLyAxMDAwMCkgKiAxMCkgLyAxMCArICcgMTBLLicpO1xuXHR9XG5cblx0bGV0IG1vdXNlTGVhdmUgPSBmdW5jdGlvbigpIHtcblx0XHRkMy5zZWxlY3RBbGwoXCIuQ291bnRyeVwiKVxuXHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0LmR1cmF0aW9uKDIwMClcblx0XHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcblx0XHRcdC5zdHlsZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgdG9vbHRpcC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMzAwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuICAgICAgLy8gZDMuc2VsZWN0KCcjdG9vbHRpcCcpLnRyYW5zaXRpb24oKS5kdXJhdGlvbigzMDApXG4gICAgICAgIC8vIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XG5cdH1cblxuXHQvLyBEcmF3IHRoZSBtYXBcblx0d29ybGQgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ3b3JsZFwiKTtcblx0d29ybGQuc2VsZWN0QWxsKFwicGF0aFwiKVxuXHRcdC5kYXRhKHRvcG8uZmVhdHVyZXMpXG5cdFx0LmVudGVyKClcblx0XHQuYXBwZW5kKFwicGF0aFwiKVxuXHRcdC8vIGRyYXcgZWFjaCBjb3VudHJ5XG5cdFx0Ly8gZDMuZ2VvUGF0aCgpIGlzIGEgYnVpbHQtaW4gZnVuY3Rpb24gb2YgZDMgdjQgYW5kIHRha2VzIGNhcmUgb2Ygc2hvd2luZyB0aGUgbWFwIGZyb20gYSBwcm9wZXJseSBmb3JtYXR0ZWQgZ2VvanNvbiBmaWxlLCBpZiBuZWNlc3NhcnkgZmlsdGVyaW5nIGl0IHRocm91Z2ggYSBwcmVkZWZpbmVkIGdlb2dyYXBoaWMgcHJvamVjdGlvblxuXHRcdC5hdHRyKFwiZFwiLCBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKSlcblxuXHRcdC8vcmV0cmlldmUgdGhlIG5hbWUgb2YgdGhlIGNvdW50cnkgZnJvbSBkYXRhXG5cdFx0LmF0dHIoXCJkYXRhLW5hbWVcIiwgZnVuY3Rpb24oZCkge1xuXHRcdFx0cmV0dXJuIGQucHJvcGVydGllcy5uYW1lXG5cdFx0fSlcblxuXHRcdC8vIHNldCB0aGUgY29sb3Igb2YgZWFjaCBjb3VudHJ5XG5cdFx0LmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIFxuICAgICAgaWYoZGF0YS5nZXQoZC5pZCkgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgIGQudG90YWxfdmFjY2luYXRpb25zID0gMDtcbiAgICAgICAgZC5wZW9wbGVfdmFjY2luYXRlZCA9IDA7XG4gICAgICAgIGQucGVvcGxlX2Z1bGx5X3ZhY2NpbmF0ZWQgPSAwO1xuICAgICAgICBkLnRvdGFsX3ZhY2NpbmF0aW9uc19wZXJfaHVuZHJlZCA9IDA7XG4gICAgICAgIGQucGVvcGxlX3ZhY2NpbmF0ZWRfcGVyX2h1bmRyZWQgPSAwO1xuICAgICAgICBkLnBlb3BsZV9mdWxseV92YWNjaW5hdGVkX3Blcl9odW5kcmVkID0gMDtcbiAgICAgICAgZC5kYWlseV92YWNjaW5hdGlvbnMgPSAwO1xuICAgICAgICBkLnVwZGF0ZSA9IFwiTm8gZGF0YVwiO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGQudG90YWxfdmFjY2luYXRpb25zID0gZGF0YS5nZXQoZC5pZCkudG90YWxfdmFjY2luYXRpb25zIHx8IDA7XG4gICAgICAgIGQucGVvcGxlX3ZhY2NpbmF0ZWQgID0gZGF0YS5nZXQoZC5pZCkucGVvcGxlX3ZhY2NpbmF0ZWQgIHx8IDA7XG4gICAgICAgIGQucGVvcGxlX2Z1bGx5X3ZhY2NpbmF0ZWQgID0gZGF0YS5nZXQoZC5pZCkucGVvcGxlX2Z1bGx5X3ZhY2NpbmF0ZWQgIHx8IDA7XG4gICAgICAgIGQudG90YWxfdmFjY2luYXRpb25zX3Blcl9odW5kcmVkID0gZGF0YS5nZXQoZC5pZCkudG90YWxfdmFjY2luYXRpb25zX3Blcl9odW5kcmVkIHx8IDA7XG4gICAgICAgIGQucGVvcGxlX3ZhY2NpbmF0ZWRfcGVyX2h1bmRyZWQgPSBkYXRhLmdldChkLmlkKS5wZW9wbGVfdmFjY2luYXRlZF9wZXJfaHVuZHJlZCB8fCAwO1xuICAgICAgICBkLnBlb3BsZV9mdWxseV92YWNjaW5hdGVkX3Blcl9odW5kcmVkID0gZGF0YS5nZXQoZC5pZCkucGVvcGxlX2Z1bGx5X3ZhY2NpbmF0ZWRfcGVyX2h1bmRyZWQgfHwgMDtcbiAgICAgICAgZC5kYWlseV92YWNjaW5hdGlvbnMgPSBkYXRhLmdldChkLmlkKS5kYWlseV92YWNjaW5hdGlvbnMgfHwgMDtcbiAgICAgICAgZC51cGRhdGUgPSBkYXRhLmdldChkLmlkKS5kYXRlIHx8IFwiTm8gZGF0YVwiO1xuICAgICAgfVxuICAgICAgXG5cdFx0XHRyZXR1cm4gY29sb3JTY2FsZShkLnRvdGFsX3ZhY2NpbmF0aW9uc19wZXJfaHVuZHJlZCk7XG5cdFx0fSlcblxuXG5cdFx0Ly8gYWRkIGEgY2xhc3MsIHN0eWxpbmcgYW5kIG1vdXNlb3Zlci9tb3VzZWxlYXZlIGFuZCBjbGljayBmdW5jdGlvbnNcblx0XHQuc3R5bGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKVxuXHRcdC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuXHRcdFx0cmV0dXJuIFwiQ291bnRyeVwiXG5cdFx0fSlcblx0XHQuYXR0cihcImlkXCIsIGZ1bmN0aW9uKGQpIHtcblx0XHRcdHJldHVybiBkLmlkXG5cdFx0fSlcblx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG5cdFx0Lm9uKFwibW91c2VvdmVyXCIsIG1vdXNlT3Zlcilcblx0XHQub24oXCJtb3VzZWxlYXZlXCIsIG1vdXNlTGVhdmUpXG5cdFx0Lm9uKFwiY2xpY2tcIiwgY2xpY2spO1xuICBcblx0Ly8gTGVnZW5kXG5cdGNvbnN0IHggPSBkMy5zY2FsZUxpbmVhcigpXG5cdFx0LmRvbWFpbihbMCwgNzVdKVxuXHRcdC5yYW5nZVJvdW5kKFs2MDAsIDg2MF0pO1xuXG5cdGNvbnN0IGxlZ2VuZCA9IHN2Zy5hcHBlbmQoXCJnXCIpXG5cdFx0LmF0dHIoXCJpZFwiLCBcImxlZ2VuZFwiKTtcblxuXHRjb25zdCBsZWdlbmRfZW50cnkgPSBsZWdlbmQuc2VsZWN0QWxsKFwiZy5sZWdlbmRcIilcblx0XHQuZGF0YShjb2xvclNjYWxlLnJhbmdlKCkubWFwKGZ1bmN0aW9uKGQpIHtcblx0XHRcdGQgPSBjb2xvclNjYWxlLmludmVydEV4dGVudChkKTtcblx0XHRcdGlmIChkWzBdID09IG51bGwpIGRbMF0gPSB4LmRvbWFpbigpWzBdO1xuXHRcdFx0aWYgKGRbMV0gPT0gbnVsbCkgZFsxXSA9IHguZG9tYWluKClbMV07XG5cdFx0XHRyZXR1cm4gZDtcblx0XHR9KSlcblx0XHQuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImxlZ2VuZF9lbnRyeVwiKTtcblxuXHRjb25zdCBsc193ID0gMjAsXG5cdFx0bHNfaCA9IDIwO1xuXG5cdGxlZ2VuZF9lbnRyeS5hcHBlbmQoXCJyZWN0XCIpXG5cdFx0LmF0dHIoXCJ4XCIsIDIwKVxuXHRcdC5hdHRyKFwieVwiLCBmdW5jdGlvbihkLCBpKSB7XG5cdFx0XHRyZXR1cm4gaGVpZ2h0IC0gKGkgKiBsc19oKSAtIDIgKiBsc19oO1xuXHRcdH0pXG5cdFx0LmF0dHIoXCJ3aWR0aFwiLCBsc193KVxuXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIGxzX2gpXG5cdFx0LnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7XG5cdFx0XHRyZXR1cm4gY29sb3JTY2FsZShkWzBdKTtcblx0XHR9KVxuXHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMC44KTtcblxuXHRsZWdlbmRfZW50cnkuYXBwZW5kKFwidGV4dFwiKVxuXHRcdC5hdHRyKFwieFwiLCA1MClcblx0XHQuYXR0cihcInlcIiwgZnVuY3Rpb24oZCwgaSkge1xuXHRcdFx0cmV0dXJuIGhlaWdodCAtIChpICogbHNfaCkgLSBsc19oIC0gNjtcblx0XHR9KVxuXHRcdC50ZXh0KGZ1bmN0aW9uKGQsIGkpIHtcblx0XG4gICAgICBcdGlmIChpID09PSAwKSByZXR1cm4gXCI8IFwiICsgZFsxXSAgKyBcIiVcIjtcbiAgICAgIFx0aWYgKGRbMV0gPCBkWzBdKSByZXR1cm4gZFswXSArIFwiJSArXCIgXG4gICAgICBcdHJldHVybiBkWzBdICsgXCIlIC0gXCIgKyBkWzFdICsgXCIlXCI7XG5cblx0XHR9KTtcblx0XHQvLyAudGV4dChmdW5jdGlvbihkLCBpKSB7XG5cdFx0Ly8gXHRpZiAoaSA9PT0gMCkgcmV0dXJuIFwiPCBcIiArIGRbMV0gLyAxMDAwMDAwICsgXCIgbVwiO1xuXHRcdC8vIFx0aWYgKGRbMV0gPCBkWzBdKSByZXR1cm4gZFswXSAvIDEwMDAwMDAgKyBcIiBtICtcIjtcblx0XHQvLyBcdHJldHVybiBkWzBdIC8gMTAwMDAwMCArIFwiIG0gLSBcIiArIGRbMV0gLyAxMDAwMDAwICsgXCIgbVwiO1xuXHRcdC8vIH0pO1xuXG5cdGxlZ2VuZC5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJ4XCIsIDE1KS5hdHRyKFwieVwiLCAyODApLnRleHQoXCJUb3RhbCB2YWNjaW5hdGlvbnMgcGVyIGh1bmRyZWRcIik7XG59XG5cbi8vIFpvb20gZnVuY3Rpb25hbGl0eVxuZnVuY3Rpb24gY2xpY2soZCkge1xuICB2YXIgeCwgeSwgaztcblxuICBpZiAoZCAmJiBjZW50ZXJlZCAhPT0gZCkge1xuICAgIHZhciBjZW50cm9pZCA9IHBhdGguY2VudHJvaWQoZCk7XG4gICAgeCA9IC0oY2VudHJvaWRbMF0gKiA2KTtcbiAgICB5ID0gKGNlbnRyb2lkWzFdICogNik7XG4gICAgayA9IDM7XG4gICAgY2VudGVyZWQgPSBkO1xuICB9IGVsc2Uge1xuICAgIHggPSAwO1xuICAgIHkgPSAwO1xuICAgIGsgPSAxO1xuICAgIGNlbnRlcmVkID0gbnVsbDtcbiAgfVxuXG4gIHdvcmxkLnNlbGVjdEFsbChcInBhdGhcIilcbiAgICAgIC5jbGFzc2VkKFwiYWN0aXZlXCIsIGNlbnRlcmVkICYmIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQgPT09IGNlbnRlcmVkOyB9KTtcblxuICB3b3JsZC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHggKyBcIixcIiArIHkgKyBcIikgc2NhbGUoXCIgKyBrICsgXCIpXCIgKTtcbiAgXG59XG5cblxuLy8vIHN0YXJ0aW5nIGNvdmlkIGNhc2UgXG5cbi8vIGludCgpO1xuXG4vLyBjYXNlcygpO1xuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==